#!/bin/bash
###############################################################################
# AppTheShelf
# Elegant LXC remote container management
#
# Copyright:
# Stefan Koch <stefkoch@posteo.de>
#
# License: GPLv3
###############################################################################
install="$(dirname $(readlink -f $0))"
rc="$HOME/.apptsrc"

#dont like to source from outside the package
if [ -e "$rc" ]; then
    . "$install/loadconfig"
fi

cmd=""
dir=""
extport=""
intport=""
name=""
hint=""
listarchive=""
ahost=""
n=0
connection="$user@$host"
host="$(echo $connection | sed -e 's/^.*@//')"
quiet=0
filter=""

function execute {
    ssh $connection sudo /var/lib/lxc/bin/appmgr $1 $2 $3 $4 $5
}

while [ "$1" != "" ];
do
    case "$1" in
        #opt/ -con / user@host / use specified connection insted of default
        "-con")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need connection"
                exit 1
            fi
            connection="$1"
            host="$(echo $connection | sed -e 's/^.*@//')"
            user="$(echo $connection | sed -e 's/@.*$//')"
            n=-1
            ;;
            #--------------------------
        #opt/ -dir / directory / deploy from specified directory
        "-dir")
            if [ $n -eq 0 ]; then
                echo "command missing"
                exit 1
            fi
            shift
            if [ ! -d "$1" ]; then
                echo "dir not found"
                exit 1
            fi
            dir="$1"
            ;;
            #--------------------------
        #opt/ -eport / portnum / route from guest port (requires -iport)
        "-eport")
            if [ $n -eq 0 ]; then
                echo "command missing"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need port"
                exit 1
            fi
            extport="$1"
            ;;
            #--------------------------
        #opt/ -iport / portnum / route to container port (requires -eport)
        "-iport")
            if [ $n -eq 0 ]; then
                echo "command missing"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need port"
                exit 1
            fi
            intport="$1"
            ;;
            #--------------------------
        #cmd/ -la /  / same as -l -a
        #cmd/ -l /  / list all available apps
        "-la")
            listarchive="archive"
            ;&
        "-l")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            cmd="list"
            ;;
            #--------------------------
        #opt/ -a /  / include archive in app listing
        "-a")
            listarchive="archive"
            ;;
            #--------------------------
        #cmd/ -lxc /  / list all lxc containers and their state
        "-lxc")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift 
            if [ "$1" != "" ]; then
                echo "this command takes no arguments"
                exit 1
            fi
            cmd="lxc"
            ;;
            #--------------------------
        #cmd/ -deploy / name / deploy dir to app (-dir)
        "-deploy")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi
            name=$1
            cmd="deploy"
            ;;
            #--------------------------
        #cmd/ -delete / name / delete specified app
        "-delete")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi
            name=$1
            cmd="delete"
            ;;
            #--------------------------
        #cmd/ -start / name / start specified app
        "-start")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi
            name=$1
            cmd="start"
            ;;
            #--------------------------
        #cmd/ -restart / name / restart specified app
        "-restart")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi
            name=$1
            cmd="restart"
            ;;
            #--------------------------
        #cmd/ -stop / name / stop specified app
        "-stop")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi
            name=$1
            cmd="stop"
            ;;
            #--------------------------
        #cmd/ -create /  / create app (opt: -name, -eport, -iport, -guestdir)
        "-create")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi 
            cmd="create"
            name="$1"
            ;;
            #--------------------------
        #opt/ -guestdir / guest_dir / allow app to read <guest_dir> under /guest
        "-guestdir")
            shift
            if [ "$1" = "" ]; then
                echo "need dir"
                exit 1
            fi 
            guestdir="$1"
            ;;
            #--------------------------
        #cmd/ -onestop / name / create if app not exist, then deploy (-dir opt: -eport -iport)
        "-onestop")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi 
            name="$1"
            cmd="onestop"
            ;;
            #--------------------------
        #cmd/ -listfw / opt:filter / list guest firewall configuration, optional filter
        "-listfw")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            filter="$1"
            cmd="listfw"
            ;;
            #--------------------------
        #cmd/ -ssh / name / ssh connect to specified app
        "-ssh")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need app name"
                exit 1
            fi
            name=$1
            port="$(execute getport $appID)"
            cmd="ssh"
            ;;
            #--------------------------
        #cmd/ -archive / name / archive specified app
        "-archive")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
                echo "need appID"
                exit 1
            fi
            name="$1"
            hint="$1"
            cmd="archive"
            ;;
            #--------------------------
        #cmd/ -restore / archive / restore specified archive to app
        "-restore")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            archive="$1"
            cmd="restore"
            ;;
            #--------------------------
        #cmd/ -ansible / name / get ansible host string for app 
        "-ansible")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            shift
            if [ "$1" = "" ]; then
               echo "need name"
               exit 1
            fi 
            name="$1"
            cmd="ansible"
            quiet=1
            ;;
            #--------------------------
        #cmd/ -setup /  / install or setup default settings
        "-setup")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            user="none"
            host="none"
            cmd="setup"
            ;;
            #--------------------------
        #cmd/ -rename / old new / rename app from <old> to <new>
        "-rename")
            if [ $n -ne 0 ]; then
                echo "$1 is a command and must be used at first place"
                exit 1
            fi
            cmd="rename"
            shift
            name_old="$1"
            shift
            if [ "$1" = "" ]; then
                echo "need <old> <new>"
                exit 1
            fi
            name_new="$1"
            ;;
            #--------------------------
        #cmd/ -h / / print this help
        "-h")
            "$install/showhelp"
            exit
            ;;
            #--------------------------
        *)
            echo "unknown command: $1"
            exit 1
            ;;
            #--------------------------
    esac
    shift
    let n++
done

###########################################################################
if [ "$cmd" = "" ]; then
    $0 -h
    exit
fi

if [ "$user" = "" -o "$host" = "" ]; then
    echo "need to specify -connect or -setup"
    exit 1
fi

if [ $quiet -eq 0 ]; then
    echo "APPTheShelf v1.0, ($connection)"
    echo ""
fi

###########################################################################
function getAppID() {
    execute getappid "$1"
}

###########################################################################
cmdfile="$install/cmd/cmd_$cmd"
if [ ! -e "$cmdfile" ]; then
    echo "Command not implemented"
    exit 1
fi

. $cmdfile
echo ""

